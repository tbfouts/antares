version: 0.2

# Boot to Qt CodeBuild buildspec - calls external build script
phases:
  install:
    commands:
      - echo "Installing GitHub CLI..."
      - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
      - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      - apt update
      - apt install gh -y

  pre_build:
    commands:
      - echo "Installing system dependencies..."
      - apt-get update
      - |
        apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          curl \
          git \
          gawk \
          wget \
          diffstat \
          unzip \
          texinfo \
          chrpath \
          socat \
          cpio \
          python3 \
          python3-pexpect \
          xz-utils \
          debianutils \
          iputils-ping \
          python3-git \
          python3-jinja2 \
          python3-subunit \
          zstd \
          liblz4-tool \
          file \
          locales \
          libacl1 \
          libusb-1.0-0 \
          libgl1-mesa-dev \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libx11-xcb-dev \
          libxext-dev \
          libxfixes-dev \
          libxi-dev \
          libxrender-dev \
          libxcb1-dev \
          libxcb-cursor-dev \
          libxcb-glx0-dev \
          libxcb-keysyms1-dev \
          libxcb-image0-dev \
          libxcb-shm0-dev \
          libxcb-icccm4-dev \
          libxcb-sync-dev \
          libxcb-xfixes0-dev \
          libxcb-shape0-dev \
          libxcb-randr0-dev \
          libxcb-render-util0-dev \
          libxcb-util-dev \
          libxcb-xinerama0-dev \
          libxcb-xkb-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libdbus-1-dev \
          libpulse-dev
      - mkdir -p $CODEBUILD_SRC_DIR/artifacts

  build:
    commands:
      - echo "Running Boot to Qt build script..."
      - chmod +x .github/workflows/build-boot2qt.sh
      - .github/workflows/build-boot2qt.sh

  post_build:
    commands:
      - echo "Checking build artifacts..."
      - |
        if [ -f "$CODEBUILD_SRC_DIR/artifacts/aws/ClusterApp" ]; then
          echo "Build completed successfully!"
          ls -la $CODEBUILD_SRC_DIR/artifacts/aws/
        else
          echo "Build failed - ClusterApp not found"
          exit 1
        fi
      
      - echo "Creating build info..."
      - |
        cat > $CODEBUILD_SRC_DIR/artifacts/aws/codebuild_info.txt << EOF
        Boot to Qt Build
        ================
        Build Date: $(date)
        Qt Version: 6.8.3
        Platform: Boot to Qt AWS EC2 ARM64
        Architecture: aarch64
        Application: Cluster
        CodeBuild Project: $CODEBUILD_PROJECT_NAME
        Build ID: $CODEBUILD_BUILD_ID
        Source Version: $CODEBUILD_RESOLVED_SOURCE_VERSION
        EOF
      
      - echo "Creating release package..."
      - cd $CODEBUILD_SRC_DIR/artifacts/aws
      - tar -czf ../antares-cluster-boot2qt-${CODEBUILD_BUILD_NUMBER}.tar.gz *
      - cd $CODEBUILD_SRC_DIR
      
      - echo "Uploading artifacts to GitHub..."
      - |
        # Retrieve GitHub token from Parameter Store
        GITHUB_TOKEN=$(aws ssm get-parameter --name "/codebuild/github-token" --with-decryption --query "Parameter.Value" --output text --region us-east-1)
        export GITHUB_TOKEN
        
        # Create a GitHub release with the artifacts
        RELEASE_TAG="boot2qt-build-${CODEBUILD_BUILD_NUMBER}"
        gh release create "$RELEASE_TAG" \
          --title "Boot to Qt Build ${CODEBUILD_BUILD_NUMBER}" \
          --notes "Automated Boot to Qt build from CodeBuild
        
        **Build Information:**
        - Build Date: $(date)
        - Qt Version: 6.8.3
        - Platform: Boot to Qt AWS EC2 ARM64
        - CodeBuild ID: $CODEBUILD_BUILD_ID
        - Source Version: $CODEBUILD_RESOLVED_SOURCE_VERSION
        
        **Artifacts:**
        - ClusterApp: Cross-compiled Qt application for AWS EC2 ARM64
        - deploy.sh: Deployment script for AWS EC2
        - build_info.txt: Detailed build information" \
          artifacts/antares-cluster-boot2qt-${CODEBUILD_BUILD_NUMBER}.tar.gz
      
      - echo "Artifacts uploaded to GitHub release!"

artifacts:
  files:
    - artifacts/aws/**/*
  name: antares-cluster-boot2qt-$CODEBUILD_BUILD_NUMBER