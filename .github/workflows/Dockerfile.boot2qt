FROM --platform=linux/amd64 ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install basic dependencies first
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    ninja-build \
    python3-pip \
    curl \
    git \
    wget \
    unzip \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install additional dependencies
RUN apt-get update && apt-get install -y \
    gawk \
    diffstat \
    texinfo \
    chrpath \
    socat \
    cpio \
    python3 \
    python3-pexpect \
    xz-utils \
    debianutils \
    iputils-ping \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages
RUN apt-get update && apt-get install -y \
    python3-git \
    python3-jinja2 \
    python3-subunit \
    && rm -rf /var/lib/apt/lists/*

# Install compression and file tools
RUN apt-get update && apt-get install -y \
    zstd \
    liblz4-tool \
    file \
    locales \
    libacl1 \
    libusb-1.0-0 \
    && rm -rf /var/lib/apt/lists/*

# Install GUI/graphics dependencies and X11 libraries needed for Qt installer
RUN apt-get update && apt-get install -y \
    libgl1-mesa-dev \
    libfontconfig1-dev \
    libfreetype6-dev \
    libx11-dev \
    libx11-xcb-dev \
    libxext-dev \
    libxfixes-dev \
    libxi-dev \
    libxrender-dev \
    libxcb1-dev \
    libxcb-cursor-dev \
    libxcb-glx0-dev \
    libxcb-keysyms1-dev \
    libxcb-image0-dev \
    libxcb-shm0-dev \
    libxcb-icccm4-dev \
    libxcb-sync-dev \
    libxcb-xfixes0-dev \
    libxcb-shape0-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-util-dev \
    libxcb-xinerama0-dev \
    libxcb-xkb-dev \
    libxkbcommon-dev \
    libxkbcommon-x11-dev \
    libdbus-1-dev \
    libpulse-dev \
    && rm -rf /var/lib/apt/lists/*

# Install repo tool manually
RUN curl https://storage.googleapis.com/git-repo-downloads/repo > /usr/local/bin/repo && \
    chmod +x /usr/local/bin/repo

# Set working directory
WORKDIR /workspace

# Download Qt Online Installer
RUN wget -O qt-online-installer-linux-x64-online.run https://download.qt.io/official_releases/online_installers/qt-online-installer-linux-x64-online.run && \
    chmod +x qt-online-installer-linux-x64-online.run

# Copy source code
COPY . /workspace/

# Create build script
COPY <<'EOF' build.sh
#!/bin/bash
set -e

# Check if Qt credentials are provided
if [ -z "$QT_EMAIL" ] || [ -z "$QT_PASSWORD" ]; then
    echo "Error: QT_EMAIL and QT_PASSWORD environment variables must be set"
    exit 1
fi

echo "Searching for available Qt packages..."
./qt-online-installer-linux-x64-online.run --headless --verbose --accept-licenses --confirm-command \
    --email "$QT_EMAIL" --password "$QT_PASSWORD" \
    search --filter-packages DisplayName=Boot

echo "Searching for Qt 6.8.3 packages..."
./qt-online-installer-linux-x64-online.run --headless --verbose --accept-licenses --confirm-command \
    --email "$QT_EMAIL" --password "$QT_PASSWORD" \
    search --filter-packages DisplayName=6.8.3

echo "Installing Qt and Boot to Qt components..."
./qt-online-installer-linux-x64-online.run --headless --verbose --accept-licenses --confirm-command \
    --email "$QT_EMAIL" --password "$QT_PASSWORD" \
    --default-answer --auto-answer installationErrorWithCancel=Ignore --root /opt/Qt \
    install qt.qt6.683.linux_gcc_64 qt.qt6.683.addons.qtshadertools embedded.b2qt.683 embedded.b2qt.683.awsec2arm64 embedded.b2qt.683.awsec2arm64.toolchain

# Set Qt installation path
export QT_DIR=/opt/Qt/6.8.3
export BOOT2QT_DIR=$QT_DIR/Boot2Qt

echo "Setting up Boot to Qt environment..."
# Find and source Boot to Qt toolchain environment setup script
TOOLCHAIN_ENV_SCRIPT=$(find $BOOT2QT_DIR -name "environment-setup-*" -type f | head -1)
if [ -f "$TOOLCHAIN_ENV_SCRIPT" ]; then
    echo "Found toolchain environment script: $TOOLCHAIN_ENV_SCRIPT"
    
    # First, let's fix the hardcoded paths in the toolchain script
    sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' "$TOOLCHAIN_ENV_SCRIPT"
    
    # Fix hardcoded paths in CMake toolchain file
    CMAKE_TOOLCHAIN_FILE="$BOOT2QT_DIR/aws-ec2-arm64/toolchain/sysroots/x86_64-pokysdk-linux/usr/share/cmake/OEToolchainConfig.cmake"
    if [ -f "$CMAKE_TOOLCHAIN_FILE" ]; then
        sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' "$CMAKE_TOOLCHAIN_FILE"
    fi
    
    # Fix hardcoded paths in all relevant files
    find "$BOOT2QT_DIR/aws-ec2-arm64/toolchain" -type f -name "*.cmake" -o -name "*.pc" -o -name "*.la" | xargs sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' 2>/dev/null || true
    
    source "$TOOLCHAIN_ENV_SCRIPT"
    
    # Set the CMake toolchain file path
    export OECORE_CMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE"
    
    echo "Toolchain environment set up successfully"
else
    echo "No toolchain environment script found"
fi

echo "Skipping Qt Designer Components build (not required for Cluster app)"

echo "Building Common Library for Boot to Qt..."
cd /workspace/common
mkdir build-boot2qt && cd build-boot2qt

# Source Boot to Qt toolchain
source "$TOOLCHAIN_ENV_SCRIPT"

# Verify toolchain is properly set
echo "CC=$CC"
echo "CXX=$CXX"

cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE \
    -DQt6_DIR=$OECORE_TARGET_SYSROOT/usr/lib/cmake/Qt6 \
    -DQT_HOST_PATH=/opt/Qt/6.8.3/gcc_64
cmake --build .

echo "Building Cluster Application for Boot to Qt..."
cd /workspace/Cluster
mkdir build-boot2qt && cd build-boot2qt

# Source Boot to Qt toolchain
source "$TOOLCHAIN_ENV_SCRIPT"

# Verify toolchain is properly set
echo "CC=$CC"
echo "CXX=$CXX"

cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE \
    -DQt6_DIR=$OECORE_TARGET_SYSROOT/usr/lib/cmake/Qt6 \
    -DQT_HOST_PATH=/opt/Qt/6.8.3/gcc_64
cmake --build .

echo "Creating deployment package..."
cd ../../
mkdir -p artifacts/aws

# Copy built Cluster application
if [ -f "Cluster/build-boot2qt/ClusterApp" ]; then
    cp Cluster/build-boot2qt/ClusterApp artifacts/aws/
    echo "✓ ClusterApp copied to artifacts/aws/"
else
    echo "✗ ClusterApp not found at Cluster/build-boot2qt/ClusterApp"
fi

# Copy required Qt libraries and dependencies
source "$TOOLCHAIN_ENV_SCRIPT"

# Create a simple deployment script
cat > artifacts/aws/deploy.sh << 'DEPLOY_EOF'
#!/bin/bash
# Simple deployment script for Boot to Qt AWS
# Copy this script and ClusterApp to your AWS EC2 instance

# Set up environment
export QT_QPA_PLATFORM=eglfs
export QT_QPA_EGLFS_INTEGRATION=eglfs_kms

# Run the Cluster application
./ClusterApp
DEPLOY_EOF

chmod +x artifacts/aws/deploy.sh

# Create deployment info
echo "Boot to Qt AWS Cluster build completed on $(date)" > artifacts/aws/build_info.txt
echo "Qt version: 6.8.3" >> artifacts/aws/build_info.txt
echo "Platform: Boot to Qt Raspberry Pi 4 (ARM64)" >> artifacts/aws/build_info.txt
echo "Architecture: aarch64" >> artifacts/aws/build_info.txt
echo "Application: Cluster only" >> artifacts/aws/build_info.txt

echo "Build completed successfully!"
echo "Artifacts available in: artifacts/aws/"
ls -la artifacts/aws/
EOF

RUN chmod +x build.sh

# Set the entrypoint to the build script
ENTRYPOINT ["./build.sh"]