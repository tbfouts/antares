name: Build Antares Cluster for Boot to Qt AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-boot2qt-aws:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          python3-pip \
          curl \
          git \
          gawk \
          wget \
          diffstat \
          unzip \
          texinfo \
          chrpath \
          socat \
          cpio \
          python3 \
          python3-pexpect \
          xz-utils \
          debianutils \
          iputils-ping \
          python3-git \
          python3-jinja2 \
          python3-subunit \
          zstd \
          liblz4-tool \
          file \
          locales \
          libacl1 \
          libusb-1.0-0 \
          libgl1-mesa-dev \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libx11-xcb-dev \
          libxext-dev \
          libxfixes-dev \
          libxi-dev \
          libxrender-dev \
          libxcb1-dev \
          libxcb-cursor-dev \
          libxcb-glx0-dev \
          libxcb-keysyms1-dev \
          libxcb-image0-dev \
          libxcb-shm0-dev \
          libxcb-icccm4-dev \
          libxcb-sync-dev \
          libxcb-xfixes0-dev \
          libxcb-shape0-dev \
          libxcb-randr0-dev \
          libxcb-render-util0-dev \
          libxcb-util-dev \
          libxcb-xinerama0-dev \
          libxcb-xkb-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libdbus-1-dev \
          libpulse-dev
        
    - name: Download Qt Online Installer
      run: |
        wget -O qt-online-installer-linux-x64-online.run https://download.qt.io/official_releases/online_installers/qt-online-installer-linux-x64-online.run
        chmod +x qt-online-installer-linux-x64-online.run
        
    - name: Install Qt and Boot to Qt components
      run: |
        # Install Qt with Boot to Qt components using credentials
        ./qt-online-installer-linux-x64-online.run --headless --verbose --accept-licenses --confirm-command \
          --email ${{ secrets.QT_EMAIL }} --password ${{ secrets.QT_PASSWORD }} \
          --default-answer --auto-answer installationErrorWithCancel=Ignore --root /opt/Qt \
          install qt.qt6.683.linux_gcc_64 embedded.b2qt.683 embedded.b2qt.683.awsec2arm64 embedded.b2qt.683.awsec2arm64.toolchain
        
    - name: Set up Boot to Qt environment
      run: |
        # Set Qt installation path
        export QT_DIR=/opt/Qt/6.8.3
        export BOOT2QT_DIR=$QT_DIR/Boot2Qt
        
        echo "Setting up Boot to Qt environment..."
        # Find and source Boot to Qt toolchain environment setup script
        TOOLCHAIN_ENV_SCRIPT=$(find $BOOT2QT_DIR -name "environment-setup-*" -type f | head -1)
        if [ -f "$TOOLCHAIN_ENV_SCRIPT" ]; then
          echo "Found toolchain environment script: $TOOLCHAIN_ENV_SCRIPT"
          
          # First, let's fix the hardcoded paths in the toolchain script
          sudo sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' "$TOOLCHAIN_ENV_SCRIPT"
          
          # Fix hardcoded paths in CMake toolchain file
          CMAKE_TOOLCHAIN_FILE="$BOOT2QT_DIR/aws-ec2-arm64/toolchain/sysroots/x86_64-pokysdk-linux/usr/share/cmake/OEToolchainConfig.cmake"
          if [ -f "$CMAKE_TOOLCHAIN_FILE" ]; then
            sudo sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' "$CMAKE_TOOLCHAIN_FILE"
          fi
          
          # Fix hardcoded paths in all relevant files
          sudo find "$BOOT2QT_DIR/aws-ec2-arm64/toolchain" -type f \( -name "*.cmake" -o -name "*.pc" -o -name "*.la" -o -name "*.conf" -o -name "*.prf" \) -exec sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' {} \; 2>/dev/null || true
          
          source "$TOOLCHAIN_ENV_SCRIPT"
          
          # Set the CMake toolchain file path
          export OECORE_CMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE"
          
          echo "Toolchain environment set up successfully"
        else
          echo "No toolchain environment script found"
        fi
        
        echo "QT_DIR=$QT_DIR" >> $GITHUB_ENV
        echo "BOOT2QT_DIR=$BOOT2QT_DIR" >> $GITHUB_ENV
        echo "TOOLCHAIN_ENV_SCRIPT=$TOOLCHAIN_ENV_SCRIPT" >> $GITHUB_ENV
        echo "OECORE_CMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE" >> $GITHUB_ENV
        
    - name: Build Qt Designer Components for Boot to Qt
      run: |
        git clone https://code.qt.io/qt-labs/qtquickdesigner-components.git
        mkdir buildDScomponents-boot2qt
        cd buildDScomponents-boot2qt
        
        # Use Boot to Qt toolchain
        source "$TOOLCHAIN_ENV_SCRIPT"
        
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE \
          -DCMAKE_INSTALL_PREFIX=$OECORE_TARGET_SYSROOT/usr \
          -DCMAKE_BUILD_TYPE=Release \
          -DQt6_DIR=$OECORE_TARGET_SYSROOT/usr/lib/cmake/Qt6 \
          -DQT_HOST_PATH=/opt/Qt/6.8.3/gcc_64 \
          ../qtquickdesigner-components
        cmake --build .
        cmake --install .
        
    - name: Build Common Library for Boot to Qt
      run: |
        cd common
        mkdir build-boot2qt && cd build-boot2qt
        
        # Source Boot to Qt toolchain
        source "$TOOLCHAIN_ENV_SCRIPT"
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE \
          -DQt6_DIR=$OECORE_TARGET_SYSROOT/usr/lib/cmake/Qt6 \
          -DQT_HOST_PATH=/opt/Qt/6.8.3/gcc_64
        cmake --build .
        
    - name: Build Cluster Application for Boot to Qt
      run: |
        cd Cluster
        mkdir build-boot2qt && cd build-boot2qt
        
        # Source Boot to Qt toolchain
        source "$TOOLCHAIN_ENV_SCRIPT"
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE \
          -DQt6_DIR=$OECORE_TARGET_SYSROOT/usr/lib/cmake/Qt6 \
          -DQT_HOST_PATH=/opt/Qt/6.8.3/gcc_64
        cmake --build .
        
    - name: Create deployment package
      run: |
        mkdir -p artifacts/aws
        
        # Copy built Cluster application
        if [ -f "Cluster/build-boot2qt/ClusterApp" ]; then
          cp Cluster/build-boot2qt/ClusterApp artifacts/aws/
        fi
        
        # Copy required Qt libraries and dependencies
        source "$TOOLCHAIN_ENV_SCRIPT"
        
        # Create a simple deployment script
        cat > artifacts/aws/deploy.sh << 'DEPLOY_EOF'
        #!/bin/bash
        # Simple deployment script for Boot to Qt AWS
        # Copy this script and ClusterApp to your AWS EC2 instance

        # Set up environment
        export QT_QPA_PLATFORM=eglfs
        export QT_QPA_EGLFS_INTEGRATION=eglfs_kms

        # Run the Cluster application
        ./ClusterApp
        DEPLOY_EOF
        
        chmod +x artifacts/aws/deploy.sh
        
        # Create deployment info
        echo "Boot to Qt AWS Cluster build completed on $(date)" > artifacts/aws/build_info.txt
        echo "Qt version: 6.8.3" >> artifacts/aws/build_info.txt
        echo "Platform: Boot to Qt AWS EC2 ARM64" >> artifacts/aws/build_info.txt
        echo "Architecture: aarch64" >> artifacts/aws/build_info.txt
        echo "Application: Cluster only" >> artifacts/aws/build_info.txt
        
    - name: Upload AWS artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: antares-cluster-boot2qt-aws-${{ github.sha }}
        path: artifacts/aws/
        retention-days: 30
        
    - name: Upload Boot to Qt logs on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: boot2qt-aws-logs-${{ github.sha }}
        path: |
          common/build-boot2qt/CMakeFiles/CMakeOutput.log
          common/build-boot2qt/CMakeFiles/CMakeError.log
          Cluster/build-boot2qt/CMakeFiles/CMakeOutput.log
          Cluster/build-boot2qt/CMakeFiles/CMakeError.log
        retention-days: 7
