name: Build Antares Qt Project for Android

on:
  push:
    branches: [ main ]

jobs:
  build-android:
    runs-on: ubuntu-latest  # Ubuntu for Android builds
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive  # In case you have submodules
        
    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: Install Android SDK components
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platforms;android-34" \
          "build-tools;34.0.0" \
          "ndk;26.1.10909125" \
          "platform-tools"
        
    - name: Install Qt for Android
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.8.4'  # Qt 6.8.4 LTS
        target: 'android'
        arch: 'android_arm64_v8a'  # Modern Android devices
        modules: >
          qtquick
          qtquickcontrols2
          qtmultimedia
          qt3d
          qtwebsockets
          qtshadertools
        cache: true
        
    - name: Set up Android environment variables
      run: |
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/26.1.10909125" >> $GITHUB_ENV
        echo "JAVA_HOME=$JAVA_HOME_17_X64" >> $GITHUB_ENV
        
    - name: Build Qt Designer Components
      run: |
        # Clone and build Qt Designer Components as specified in README
        git clone https://code.qt.io/qt-labs/qtquickdesigner-components.git
        mkdir buildDScomponents
        cd buildDScomponents
        cmake -GNinja \
          -DCMAKE_INSTALL_PREFIX=$Qt6_DIR \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-26 \
          ../qtquickdesigner-components
        cmake --build .
        cmake --install .
        
    - name: Build Common Library
      run: |
        cd common
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-26 \
          -DQt6_DIR=$Qt6_DIR
        cmake --build .
        
    - name: Build Cluster Application
      run: |
        cd Cluster
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-26 \
          -DQt6_DIR=$Qt6_DIR
        cmake --build .
        
    - name: Build IVI Application
      run: |
        cd IVI
        mkdir build && cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-26 \
          -DQt6_DIR=$Qt6_DIR
        cmake --build .
        
    - name: Package Android APKs
      run: |
        # Create a directory for artifacts
        mkdir -p artifacts
        
        # Build APKs if the projects are configured for Android deployment
        cd Cluster/build
        if [ -f "android-build/build/outputs/apk/debug/android-build-debug.apk" ]; then
          cp android-build/build/outputs/apk/debug/android-build-debug.apk ../../artifacts/GLOApp-debug.apk
        fi
        
        cd ../../IVI/build
        if [ -f "android-build/build/outputs/apk/debug/android-build-debug.apk" ]; then
          cp android-build/build/outputs/apk/debug/android-build-debug.apk ../../artifacts/QtMediaSwipeApp-debug.apk
        fi
        
        # Create a simple info file
        echo "Android build completed on $(date)" > ../../artifacts/build_info.txt
        echo "Qt version: 6.8.4 LTS" >> ../../artifacts/build_info.txt
        echo "Android ABI: arm64-v8a" >> ../../artifacts/build_info.txt
        echo "Android API: 26" >> ../../artifacts/build_info.txt
        
    - name: Upload Android APK artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: antares-android-apks-${{ github.sha }}
        path: artifacts/
        retention-days: 30
        
    - name: Upload logs on failure
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: android-build-logs-${{ github.sha }}
        path: |
          */build/CMakeFiles/CMakeOutput.log
          */build/CMakeFiles/CMakeError.log
        retention-days: 7

