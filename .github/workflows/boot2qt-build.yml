name: Boot to Qt Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  trigger-codebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Start CodeBuild project
        run: |
          BUILD_ID=$(aws codebuild start-build --project-name "antares-cluster-boot2qt-docker" --query 'build.id' --output text)
          echo "Started CodeBuild: $BUILD_ID"
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
      
      - name: Wait for build completion
        run: |
          echo "Waiting for build to complete: $BUILD_ID"
          while true; do
            STATUS=$(aws codebuild batch-get-builds --ids "$BUILD_ID" --query 'builds[0].buildStatus' --output text)
            echo "Build status: $STATUS"
            
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "Build completed successfully!"
              break
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "FAULT" ] || [ "$STATUS" = "STOPPED" ] || [ "$STATUS" = "TIMED_OUT" ]; then
              echo "Build failed with status: $STATUS"
              echo "FAILED_BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
              echo "FAILED_BUILD_STATUS=$STATUS" >> $GITHUB_ENV
              exit 1
            fi
            
            sleep 30
          done
      
      - name: Get build logs URL
        run: |
          LOG_URL=$(aws codebuild batch-get-builds --ids "$BUILD_ID" --query 'builds[0].logs.deepLink' --output text)
          echo "Build logs: $LOG_URL"
          echo "Build completed successfully! Check AWS CodeBuild console for detailed logs."
      
      - name: Checkout repository for deployment scripts
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download build artifacts for deployment
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Downloading build artifacts from GitHub release..."
          
          # Get the build number from CodeBuild
          BUILD_NUMBER=$(aws codebuild batch-get-builds --ids "$BUILD_ID" --query 'builds[0].buildNumber' --output text)
          RELEASE_TAG="boot2qt-build-${BUILD_NUMBER}"
          
          echo "Downloading from release: $RELEASE_TAG"
          
          # Download the tarball from the GitHub release
          gh release download "$RELEASE_TAG" --repo "${{ github.repository }}" --pattern "antares-cluster-boot2qt-*.tar.gz"
          
          # Create artifacts directory and extract
          mkdir -p build-artifacts
          TARBALL=$(ls antares-cluster-boot2qt-*.tar.gz | head -1)
          
          if [ -f "$TARBALL" ]; then
            tar -xzf "$TARBALL" -C build-artifacts/
            echo "Build artifacts extracted successfully"
            ls -la build-artifacts/
          else
            echo "No tarball found in release"
            exit 1
          fi
      
      - name: Deploy to EC2 instance
        env:
          EC2_KEY_NAME: ${{ secrets.EC2_KEY_NAME }}
          EC2_SECURITY_GROUP: ${{ secrets.EC2_SECURITY_GROUP }}
          EC2_SUBNET_ID: ${{ secrets.EC2_SUBNET_ID }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "Deploying successful build to EC2 instance..."
          
          # Make deployment script executable
          chmod +x .github/workflows/deploy-to-ec2.sh
          
          # Run deployment
          ./.github/workflows/deploy-to-ec2.sh
      
      - name: Wait and collect cluster logs
        if: success()
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          echo "Waiting 2 minutes for testing, then collecting cluster logs..."
          sleep 120  # Wait 2 minutes
          
          # Recreate SSH key file
          KEY_FILE="/tmp/deployment-key.pem"
          rm -f "$KEY_FILE"  # Remove existing file if it exists
          echo "$EC2_PRIVATE_KEY" > "$KEY_FILE"
          chmod 400 "$KEY_FILE"
          
          # Download cluster logs from EC2 instance
          if [ -n "$PUBLIC_IP" ]; then
            echo "Downloading cluster logs from EC2 instance..."
            scp -o StrictHostKeyChecking=no -i "$KEY_FILE" user@"$PUBLIC_IP":/opt/antares/cluster.log ./cluster.log || echo "No cluster.log found"
          fi
      
      - name: Analyze cluster logs with Claude Code
        if: success()
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GH_TOKEN: ${{ github.token }}
          EC2_KEY_NAME: ${{ secrets.EC2_KEY_NAME }}
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          if [ -f "cluster.log" ]; then
            echo "Installing Claude Code CLI for cluster log analysis..."
            curl -fsSL https://claude.ai/install.sh | bash
            echo "$HOME/.claude/bin" >> $GITHUB_PATH
            
            # Create cluster analysis prompt
            cat > cluster_analysis_prompt.md << 'EOF'
          # EC2 Cluster Deployment Analysis
          
          Please analyze the cluster deployment logs from our EC2 instance:
          
          **Deployment Details:**
          - Instance Type: g5g.xlarge (GPU-enabled ARM64)
          - Platform: Boot2Qt 6.8.3
          - Application: Antares Cluster App
          - Runtime: 2 minutes
          
          **Your Task:**
          1. Examine the cluster logs in `cluster.log`
          2. Identify any errors, warnings, or performance issues
          3. Assess if the application started correctly
          4. Report on GPU acceleration status and Qt platform integration
          5. Suggest improvements for deployment or runtime configuration
          
          **Key Areas to Check:**
          - Application startup and initialization
          - Qt platform (eglfs) and GPU integration
          - Any runtime errors or crashes
          - Performance metrics if available
          - Resource usage indicators
          
          Please provide a concise summary of the deployment health and any recommendations.
          EOF
          
            # Run Claude Code analysis
            echo "$(cat cluster_analysis_prompt.md)" | claude --dangerously-skip-permissions
            
            # Clean up
            rm -f cluster_analysis_prompt.md
          else
            echo "No cluster.log file found for analysis"
          fi
      
      - name: Cleanup EC2 instance
        if: always()
        run: |
          if [ -n "$INSTANCE_ID" ]; then
            echo "Terminating EC2 instance: $INSTANCE_ID"
            aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
            echo "Instance $INSTANCE_ID terminated"
          else
            echo "No instance ID found to terminate"
          fi
      
      
      - name: Checkout repository for Claude Code analysis
        if: failure() && env.FAILED_BUILD_ID
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install Claude Code CLI
        if: failure() && env.FAILED_BUILD_ID
        run: |
          echo "Installing Claude Code CLI..."
          curl -fsSL https://claude.ai/install.sh | bash
          echo "$HOME/.claude/bin" >> $GITHUB_PATH
          claude --version
      
      - name: Configure Claude Code
        if: failure() && env.FAILED_BUILD_ID
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        run: |
          echo "Configuring Claude Code..."
          echo "API key configured via environment variable"
      
      - name: Fetch build logs for Claude analysis
        if: failure() && env.FAILED_BUILD_ID
        run: |
          echo "Fetching CodeBuild logs..."
          LOG_GROUP=$(aws codebuild batch-get-builds --ids "$FAILED_BUILD_ID" --query 'builds[0].logs.groupName' --output text)
          LOG_STREAM=$(aws codebuild batch-get-builds --ids "$FAILED_BUILD_ID" --query 'builds[0].logs.streamName' --output text)
          
          if [ "$LOG_GROUP" != "None" ] && [ "$LOG_STREAM" != "None" ]; then
            aws logs get-log-events \
              --log-group-name "$LOG_GROUP" \
              --log-stream-name "$LOG_STREAM" \
              --limit 200 \
              --query 'events[*].message' \
              --output text > codebuild_failure_logs.txt
            echo "Build logs saved to codebuild_failure_logs.txt"
          else
            echo "No build logs available" > codebuild_failure_logs.txt
          fi
      
      - name: Analyze and fix build failure with Claude Code
        if: failure() && env.FAILED_BUILD_ID
        env:
          ANTHROPIC_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Running Claude Code to analyze and fix the build failure..."
          
          # Create a comprehensive prompt for Claude Code
          cat > fix_build_failure_prompt.md << 'EOF'
          # CodeBuild Failure Auto-Fix Request
          
          I need you to analyze and fix this CodeBuild failure:
          
          **Build Details:**
          - Build ID: ${{ env.FAILED_BUILD_ID }}
          - Status: ${{ env.FAILED_BUILD_STATUS }}  
          - Project: antares-cluster-boot2qt-docker
          - Workflow: Boot to Qt Build
          
          **Your Task:**
          1. Examine the build failure logs in `codebuild_failure_logs.txt`
          2. Analyze the repository structure and build scripts
          3. Identify the root cause of the failure
          4. Make the necessary code changes to fix the issue
          5. Create a branch and PR with your fixes
          
          **Key Files to Consider:**
          - `.github/workflows/build-boot2qt.sh` (main build script)
          - `.github/workflows/boot2qt-build.yml` (workflow definition)
          - Any CMake files or configuration that might be causing issues
          
          **Requirements:**
          - IMPORTANT: Actually modify the files to fix the problem using Edit tool
          - Create a new branch with: git checkout -b fix/codebuild-${{ env.FAILED_BUILD_ID }}
          - After making changes, write a descriptive commit message based on what you fixed
          - Commit with: git add . && git commit -m "your descriptive message here"
          - Push branch with: git push origin fix/codebuild-${{ env.FAILED_BUILD_ID }}
          - Create PR with a descriptive title and body explaining the fix you made
          - Use: gh pr create --title "Your descriptive PR title" --body "Detailed explanation of fix" --draft
          - This is running in GitHub Actions - you MUST actually execute these commands
          
          Please start by reading the failure logs and then systematically work through the fix.
          EOF
          
          # Run Claude Code with the prompt in interactive mode
          echo "$(cat fix_build_failure_prompt.md)" | claude --dangerously-skip-permissions
          
          # Clean up temporary files that shouldn't be committed
          rm -f fix_build_failure_prompt.md codebuild_failure_logs.txt
      
      - name: Setup git for PR creation
        if: failure() && env.FAILED_BUILD_ID
        run: |
          git config user.name "claude-code[bot]"
          git config user.email "claude-code[bot]@users.noreply.github.com"
      
      - name: Create fallback issue if no PR was created
        if: failure() && env.FAILED_BUILD_ID
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if Claude Code already created a PR
          if gh pr list --head "fix/codebuild-${{ env.FAILED_BUILD_ID }}" --json number | grep -q "number"; then
            echo "PR already created by Claude Code for this build"
          elif git diff --quiet && git diff --cached --quiet; then
            echo "No changes were made by Claude Code. Creating issue instead..."
            
            # Read the logs for issue context
            LOGS_PREVIEW=$(head -50 codebuild_failure_logs.txt)
            
            gh issue create \
              --title "CodeBuild Failure - Build ${{ env.FAILED_BUILD_ID }}" \
              --body "## CodeBuild Failure Report
          
          **Build Details:**
          - Build ID: \`${{ env.FAILED_BUILD_ID }}\`
          - Status: \`${{ env.FAILED_BUILD_STATUS }}\`
          - Workflow Run: ${{ github.run_id }}
          - Project: antares-cluster-boot2qt-docker
          
          ## Build Logs Preview
          \`\`\`
          $LOGS_PREVIEW
          \`\`\`
          
          ## Action Required
          Claude Code was unable to automatically fix this build failure. Manual investigation is required.
          
          **Next Steps:**
          1. Review the full build logs in AWS CodeBuild console
          2. Examine the build script: \`.github/workflows/build-boot2qt.sh\`
          3. Check for dependency or configuration issues
          
          ---
          *This issue was automatically created after Claude Code analysis.*" \
              --label "bug,codebuild-failure,needs-investigation"
          else
            echo "Changes were made by Claude Code - PR should have been created"
          fi