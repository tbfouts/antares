version: 0.2

# AWS CodeBuild specification for Qt Boot to Qt AWS build
phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing system dependencies..."
      - apt-get update
      - |
        apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          curl \
          git \
          gawk \
          wget \
          diffstat \
          unzip \
          texinfo \
          chrpath \
          socat \
          cpio \
          python3 \
          python3-pexpect \
          xz-utils \
          debianutils \
          iputils-ping \
          python3-git \
          python3-jinja2 \
          python3-subunit \
          zstd \
          liblz4-tool \
          file \
          locales \
          libacl1 \
          libusb-1.0-0 \
          libgl1-mesa-dev \
          libfontconfig1-dev \
          libfreetype6-dev \
          libx11-dev \
          libx11-xcb-dev \
          libxext-dev \
          libxfixes-dev \
          libxi-dev \
          libxrender-dev \
          libxcb1-dev \
          libxcb-cursor-dev \
          libxcb-glx0-dev \
          libxcb-keysyms1-dev \
          libxcb-image0-dev \
          libxcb-shm0-dev \
          libxcb-icccm4-dev \
          libxcb-sync-dev \
          libxcb-xfixes0-dev \
          libxcb-shape0-dev \
          libxcb-randr0-dev \
          libxcb-render-util0-dev \
          libxcb-util-dev \
          libxcb-xinerama0-dev \
          libxcb-xkb-dev \
          libxkbcommon-dev \
          libxkbcommon-x11-dev \
          libdbus-1-dev \
          libpulse-dev

  pre_build:
    commands:
      - echo "Checking for Qt cache in S3..."
      - |
        if aws s3 ls s3://$QT_CACHE_BUCKET/qt-6.8.3/ > /dev/null 2>&1; then
          echo "✅ Qt cache found in S3, downloading..."
          aws s3 sync s3://$QT_CACHE_BUCKET/qt-6.8.3/ /opt/Qt/6.8.3/ --quiet
          echo "Qt cache restored. Size: $(du -sh /opt/Qt)"
        else
          echo "❌ Qt cache not found in S3, will install from scratch..."
          
          # Download Qt installer
          wget -O qt-online-installer-linux-x64-online.run https://download.qt.io/official_releases/online_installers/qt-online-installer-linux-x64-online.run
          chmod +x qt-online-installer-linux-x64-online.run
          
          # Install Qt components
          echo "Installing Qt 6.8.3 with Boot to Qt components..."
          timeout 3600 ./qt-online-installer-linux-x64-online.run --headless --verbose --accept-licenses --confirm-command \
            --email $QT_EMAIL --password $QT_PASSWORD \
            --default-answer --auto-answer installationErrorWithCancel=Ignore --root /opt/Qt \
            install qt.qt6.683.linux_gcc_64 embedded.b2qt.683 embedded.b2qt.683.awsec2arm64 embedded.b2qt.683.awsec2arm64.toolchain
          
          echo "Qt installation completed. Caching to S3..."
          aws s3 sync /opt/Qt/6.8.3/ s3://$QT_CACHE_BUCKET/qt-6.8.3/ --quiet
          echo "Qt cached to S3 successfully"
        fi
      
      - echo "Setting up Boot to Qt environment..."
      - export QT_DIR=/opt/Qt/6.8.3
      - export BOOT2QT_DIR=$QT_DIR/Boot2Qt
      - |
        # Find and fix toolchain environment setup script
        TOOLCHAIN_ENV_SCRIPT=$(find $BOOT2QT_DIR -name "environment-setup-*" -type f | head -1)
        if [ -f "$TOOLCHAIN_ENV_SCRIPT" ]; then
          echo "Found toolchain environment script: $TOOLCHAIN_ENV_SCRIPT"
          
          # Fix hardcoded paths in toolchain script
          sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' "$TOOLCHAIN_ENV_SCRIPT"
          
          # Fix hardcoded paths in CMake toolchain file
          CMAKE_TOOLCHAIN_FILE="$BOOT2QT_DIR/aws-ec2-arm64/toolchain/sysroots/x86_64-pokysdk-linux/usr/share/cmake/OEToolchainConfig.cmake"
          if [ -f "$CMAKE_TOOLCHAIN_FILE" ]; then
            sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' "$CMAKE_TOOLCHAIN_FILE"
          fi
          
          # Fix hardcoded paths in all relevant files
          find "$BOOT2QT_DIR/aws-ec2-arm64/toolchain" -type f \( -name "*.cmake" -o -name "*.pc" -o -name "*.la" -o -name "*.conf" -o -name "*.prf" \) -exec sed -i 's|/usr/local/oe-sdk-hardcoded-buildpath/sysroots|/opt/Qt/6.8.3/Boot2Qt/aws-ec2-arm64/toolchain/sysroots|g' {} \; 2>/dev/null || true
          
          source "$TOOLCHAIN_ENV_SCRIPT"
          export OECORE_CMAKE_TOOLCHAIN_FILE="$CMAKE_TOOLCHAIN_FILE"
          
          echo "Toolchain environment set up successfully"
        else
          echo "❌ No toolchain environment script found"
          exit 1
        fi

  build:
    commands:
      - echo "Building Qt Designer Components for Boot to Qt..."
      - |
        # Re-establish environment variables
        export QT_DIR=/opt/Qt/6.8.3
        export BOOT2QT_DIR=$QT_DIR/Boot2Qt
        
        # Find and source toolchain environment script
        TOOLCHAIN_ENV_SCRIPT=$(find $BOOT2QT_DIR -name "environment-setup-*" -type f | head -1)
        if [ -f "$TOOLCHAIN_ENV_SCRIPT" ]; then
          echo "Sourcing toolchain environment: $TOOLCHAIN_ENV_SCRIPT"
          source "$TOOLCHAIN_ENV_SCRIPT"
          
          # Set CMake toolchain file
          export OECORE_CMAKE_TOOLCHAIN_FILE="$BOOT2QT_DIR/aws-ec2-arm64/toolchain/sysroots/x86_64-pokysdk-linux/usr/share/cmake/OEToolchainConfig.cmake"
          
          echo "Environment variables set:"
          echo "  OECORE_CMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE"
          echo "  OECORE_TARGET_SYSROOT=$OECORE_TARGET_SYSROOT"
          echo "  QT_HOST_PATH=/opt/Qt/6.8.3/gcc_64"
        else
          echo "❌ Toolchain environment script not found"
          exit 1
        fi
        
        # Build Qt Designer Components
        git clone https://code.qt.io/qt-labs/qtquickdesigner-components.git
        mkdir buildDScomponents-boot2qt
        cd buildDScomponents-boot2qt
        
        cmake -GNinja \
          -DCMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE \
          -DCMAKE_INSTALL_PREFIX=$OECORE_TARGET_SYSROOT/usr \
          -DCMAKE_BUILD_TYPE=Release \
          -DQt6_DIR=$OECORE_TARGET_SYSROOT/usr/lib/cmake/Qt6 \
          -DQT_HOST_PATH=/opt/Qt/6.8.3/gcc_64 \
          ../qtquickdesigner-components
        cmake --build .
        cmake --install .
      
      - echo "Building Common Library for Boot to Qt..."
      - |
        # Re-establish environment for Common Library
        export QT_DIR=/opt/Qt/6.8.3
        export BOOT2QT_DIR=$QT_DIR/Boot2Qt
        
        TOOLCHAIN_ENV_SCRIPT=$(find $BOOT2QT_DIR -name "environment-setup-*" -type f | head -1)
        source "$TOOLCHAIN_ENV_SCRIPT"
        export OECORE_CMAKE_TOOLCHAIN_FILE="$BOOT2QT_DIR/aws-ec2-arm64/toolchain/sysroots/x86_64-pokysdk-linux/usr/share/cmake/OEToolchainConfig.cmake"
        
        cd $CODEBUILD_SRC_DIR/common
        mkdir build-boot2qt && cd build-boot2qt
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE \
          -DQt6_DIR=$OECORE_TARGET_SYSROOT/usr/lib/cmake/Qt6 \
          -DQT_HOST_PATH=/opt/Qt/6.8.3/gcc_64
        cmake --build .
      
      - echo "Building Cluster Application for Boot to Qt..."
      - |
        # Re-establish environment for Cluster
        export QT_DIR=/opt/Qt/6.8.3
        export BOOT2QT_DIR=$QT_DIR/Boot2Qt
        
        TOOLCHAIN_ENV_SCRIPT=$(find $BOOT2QT_DIR -name "environment-setup-*" -type f | head -1)
        source "$TOOLCHAIN_ENV_SCRIPT"
        export OECORE_CMAKE_TOOLCHAIN_FILE="$BOOT2QT_DIR/aws-ec2-arm64/toolchain/sysroots/x86_64-pokysdk-linux/usr/share/cmake/OEToolchainConfig.cmake"
        
        cd $CODEBUILD_SRC_DIR/Cluster
        mkdir build-boot2qt && cd build-boot2qt
        
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$OECORE_CMAKE_TOOLCHAIN_FILE \
          -DQt6_DIR=$OECORE_TARGET_SYSROOT/usr/lib/cmake/Qt6 \
          -DQT_HOST_PATH=/opt/Qt/6.8.3/gcc_64
        cmake --build .
      
      - echo "✅ Build completed successfully!"

  post_build:
    commands:
      - echo "Creating deployment package..."
      - mkdir -p artifacts/aws
      - |
        # Copy built Cluster application
        if [ -f "$CODEBUILD_SRC_DIR/Cluster/build-boot2qt/ClusterApp" ]; then
          cp $CODEBUILD_SRC_DIR/Cluster/build-boot2qt/ClusterApp artifacts/aws/
          echo "✅ ClusterApp copied to artifacts"
        else
          echo "❌ ClusterApp not found"
          exit 1
        fi
      
      - |
        # Create deployment script
        cat > artifacts/aws/deploy.sh << 'EOF'
        #!/bin/bash
        # Boot to Qt AWS deployment script
        
        # Set up environment
        export QT_QPA_PLATFORM=eglfs
        export QT_QPA_EGLFS_INTEGRATION=eglfs_kms
        
        # Run the Cluster application
        ./ClusterApp
        EOF
        chmod +x artifacts/aws/deploy.sh
      
      - |
        # Create build info
        cat > artifacts/aws/build_info.txt << EOF
        Boot to Qt AWS Cluster Build
        ===========================
        Build Date: $(date)
        Qt Version: 6.8.3
        Platform: Boot to Qt AWS EC2 ARM64
        Architecture: aarch64
        Application: Cluster
        CodeBuild Project: $CODEBUILD_PROJECT_NAME
        Build ID: $CODEBUILD_BUILD_ID
        Source Version: $CODEBUILD_RESOLVED_SOURCE_VERSION
        EOF
      
      - echo "Uploading artifacts to S3..."
      - aws s3 sync artifacts/aws/ s3://$ARTIFACTS_BUCKET/builds/$CODEBUILD_BUILD_NUMBER/ --quiet
      - echo "✅ Artifacts uploaded to s3://$ARTIFACTS_BUCKET/builds/$CODEBUILD_BUILD_NUMBER/"

artifacts:
  files:
    - artifacts/aws/**/*
  name: antares-cluster-boot2qt-aws-$CODEBUILD_BUILD_NUMBER

cache:
  paths:
    - /opt/Qt/6.8.3/**/*